* po-parse-samified
  :PROPERTIES:
  :CUSTOM_ID: po-parse-samified
  :END:
This project contains source code and supporting files for a serverless
application that you can deploy with the SAM CLI. It includes the
following files and folders.

- po_parse - Code for the application's Lambda function.
- events - Invocation events that you can use to invoke the function.
- tests - Unit tests for the application code.
- template.yaml - A template that defines the application's AWS
  resources.

The application uses several AWS resources, including Lambda functions
and an API Gateway API. These resources are defined in the
=template.yaml= file in this project. You can update the template to add
AWS resources through the same deployment process that updates your
application code.

If you prefer to use an integrated development environment (IDE) to
build and test your application, you can use the AWS Toolkit.\\
The AWS Toolkit is an open source plug-in for popular IDEs that uses the
SAM CLI to build and deploy serverless applications on AWS. The AWS
Toolkit also adds a simplified step-through debugging experience for
Lambda function code. See the following links to get started.

- [[https://docs.aws.amazon.com/toolkit-for-jetbrains/latest/userguide/welcome.html][PyCharm]]
- [[https://docs.aws.amazon.com/toolkit-for-jetbrains/latest/userguide/welcome.html][IntelliJ]]
- [[https://docs.aws.amazon.com/toolkit-for-vscode/latest/userguide/welcome.html][VS
  Code]]
- [[https://docs.aws.amazon.com/toolkit-for-visual-studio/latest/user-guide/welcome.html][Visual
  Studio]]

** Deploy the sample application
   :PROPERTIES:
   :CUSTOM_ID: deploy-the-sample-application
   :END:
The Serverless Application Model Command Line Interface (SAM CLI) is an
extension of the AWS CLI that adds functionality for building and
testing Lambda applications. It uses Docker to run your functions in an
Amazon Linux environment that matches Lambda. It can also emulate your
application's build environment and API.

To use the SAM CLI, you need the following tools.

- SAM CLI -
  [[https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html][Install  the SAM CLI]]
- [[https://www.python.org/downloads/][Python 3 installed]]
- Docker -  [[https://hub.docker.com/search/?type=edition&offering=community][Install  Docker community edition]]

To build and deploy your application for the first time, run the
following in your shell:

#+BEGIN_SRC sh
  sam build --use-container
  sam deploy --guided
#+END_SRC

The first command will build the source of your application. The second
command will package and deploy your application to AWS, with a series
of prompts:

- *Stack Name*: The name of the stack to deploy to CloudFormation. This
  should be unique to your account and region, and a good starting point
  would be something matching your project name.
- *AWS Region*: The AWS region you want to deploy your app to.
- *Confirm changes before deploy*: If set to yes, any change sets will
  be shown to you before execution for manual review. If set to no, the
  AWS SAM CLI will automatically deploy application changes.
- *Allow SAM CLI IAM role creation*: Many AWS SAM templates, including
  this example, create AWS IAM roles required for the AWS Lambda
  function(s) included to access AWS services. By default, these are
  scoped down to minimum required permissions. To deploy an AWS
  CloudFormation stack which creates or modified IAM roles, the
  =CAPABILITY_IAM= value for =capabilities= must be provided. If
  permission isn't provided through this prompt, to deploy this example
  you must explicitly pass =--capabilities CAPABILITY_IAM= to the
  =sam deploy= command.
- *Save arguments to samconfig.toml*: If set to yes, your choices will
  be saved to a configuration file inside the project, so that in the
  future you can just re-run =sam deploy= without parameters to deploy
  changes to your application.

You can find your API Gateway Endpoint URL in the output values
displayed after deployment.

** Use the SAM CLI to build and test locally
   :PROPERTIES:
   :CUSTOM_ID: use-the-sam-cli-to-build-and-test-locally
   :END:
Build your application with the =sam build --use-container= command.

#+BEGIN_SRC sh
  po-parse-samified$ sam build --use-container
#+END_SRC

The SAM CLI installs dependencies defined in
=hello_world/requirements.txt=, creates a deployment package, and saves
it in the =.aws-sam/build= folder.

Test a single function by invoking it directly with a test event. An
event is a JSON document that represents the input that the function
receives from the event source. Test events are included in the =events=
folder in this project.

Run functions locally and invoke them with the =sam local invoke=
command.

#+BEGIN_SRC sh
  po-parse-samified$ sam local invoke HelloWorldFunction --event events/event.json
#+END_SRC

The SAM CLI can also emulate your application's API. Use the
=sam local start-api= to run the API locally on port 3000.

#+BEGIN_SRC sh
  po-parse-samified$ sam local start-api
  po-parse-samified$ curl http://localhost:3000/
#+END_SRC

The SAM CLI reads the application template to determine the API's routes
and the functions that they invoke. The =Events= property on each
function's definition includes the route and method for each path.

#+BEGIN_EXAMPLE
        Events:
          HelloWorld:
            Type: Api
            Properties:
              Path: /hello
              Method: get
#+END_EXAMPLE

** Add a resource to your application
   :PROPERTIES:
   :CUSTOM_ID: add-a-resource-to-your-application
   :END:
The application template uses AWS Serverless Application Model (AWS SAM)
to define application resources. AWS SAM is an extension of AWS
CloudFormation with a simpler syntax for configuring common serverless
application resources such as functions, triggers, and APIs. For
resources not included in [[https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md][the SAM specification]], you can use standard
[[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html][AWS CloudFormation]] resource types.

** Fetch, tail, and filter Lambda function logs
   :PROPERTIES:
   :CUSTOM_ID: fetch-tail-and-filter-lambda-function-logs
   :END:
To simplify troubleshooting, SAM CLI has a command called =sam logs=.
=sam logs= lets you fetch logs generated by your deployed Lambda
function from the command line. In addition to printing the logs on the
terminal, this command has several nifty features to help you quickly
find the bug.

=NOTE=: This command works for all AWS Lambda functions; not just the
ones you deploy using SAM.

#+BEGIN_SRC sh
  po-parse-samified$ sam logs -n HelloWorldFunction --stack-name po-parse-samified --tail
#+END_SRC

You can find more information and examples about filtering Lambda
function logs in the
[[https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-logging.html][SAM CLI Documentation]].

** Unit tests
   :PROPERTIES:
   :CUSTOM_ID: unit-tests
   :END:
Tests are defined in the =tests= folder in this project. Use PIP to
install the [[https://docs.pytest.org/en/latest/][pytest]] and run unit
tests.

#+BEGIN_SRC sh
  po-parse-samified$ pip install pytest pytest-mock --user
  po-parse-samified$ python -m pytest tests/ -v
#+END_SRC

** Cleanup
   :PROPERTIES:
   :CUSTOM_ID: cleanup
   :END:
To delete the sample application that you created, use the AWS CLI.
Assuming you used your project name for the stack name, you can run the
following:

#+BEGIN_SRC sh
  aws cloudformation delete-stack --stack-name po-parse-samified
#+END_SRC

** Resources
   :PROPERTIES:
   :CUSTOM_ID: resources
   :END:
   See the [[https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html][AWS SAM developer guide]] for an introduction to SAM specification, the SAM
   CLI, and serverless application concepts.

   Next, you can use AWS Serverless Application Repository to deploy ready
   to use Apps that go beyond hello world samples and learn how authors
   developed their applications: [[https://aws.amazon.com/serverless/serverlessrepo/][AWS Serverless Application Repository main page]]
